// Generated by gencpp from file vitarana_drone/DetectionFeatures.msg
// DO NOT EDIT!


#ifndef VITARANA_DRONE_MESSAGE_DETECTIONFEATURES_H
#define VITARANA_DRONE_MESSAGE_DETECTIONFEATURES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vitarana_drone
{
template <class ContainerAllocator>
struct DetectionFeatures_
{
  typedef DetectionFeatures_<ContainerAllocator> Type;

  DetectionFeatures_()
    : x(0.0)
    , y(0.0)
    , width(0.0)
    , height(0.0)
    , altitude(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)  {
    }
  DetectionFeatures_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , width(0.0)
    , height(0.0)
    , altitude(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionFeatures_

typedef ::vitarana_drone::DetectionFeatures_<std::allocator<void> > DetectionFeatures;

typedef boost::shared_ptr< ::vitarana_drone::DetectionFeatures > DetectionFeaturesPtr;
typedef boost::shared_ptr< ::vitarana_drone::DetectionFeatures const> DetectionFeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vitarana_drone::DetectionFeatures_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vitarana_drone::DetectionFeatures_<ContainerAllocator1> & lhs, const ::vitarana_drone::DetectionFeatures_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.altitude == rhs.altitude &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vitarana_drone::DetectionFeatures_<ContainerAllocator1> & lhs, const ::vitarana_drone::DetectionFeatures_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vitarana_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79a389f9d1f438077e5c4f689cc9c594";
  }

  static const char* value(const ::vitarana_drone::DetectionFeatures_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79a389f9d1f43807ULL;
  static const uint64_t static_value2 = 0x7e5c4f689cc9c594ULL;
};

template<class ContainerAllocator>
struct DataType< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vitarana_drone/DetectionFeatures";
  }

  static const char* value(const ::vitarana_drone::DetectionFeatures_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 width\n"
"float32 height\n"
"\n"
"float32 altitude\n"
"float32 latitude\n"
"float32 longitude\n"
"float32 pitch\n"
"float32 roll\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::vitarana_drone::DetectionFeatures_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.altitude);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionFeatures_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vitarana_drone::DetectionFeatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vitarana_drone::DetectionFeatures_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VITARANA_DRONE_MESSAGE_DETECTIONFEATURES_H
