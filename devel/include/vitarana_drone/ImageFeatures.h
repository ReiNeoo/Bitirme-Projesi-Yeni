// Generated by gencpp from file vitarana_drone/ImageFeatures.msg
// DO NOT EDIT!


#ifndef VITARANA_DRONE_MESSAGE_IMAGEFEATURES_H
#define VITARANA_DRONE_MESSAGE_IMAGEFEATURES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vitarana_drone
{
template <class ContainerAllocator>
struct ImageFeatures_
{
  typedef ImageFeatures_<ContainerAllocator> Type;

  ImageFeatures_()
    : height(0.0)
    , width(0.0)
    , fow(0.0)
    , angle_roll(0.0)
    , angle_pitch(0.0)
    , angle_yaw(0.0)  {
    }
  ImageFeatures_(const ContainerAllocator& _alloc)
    : height(0.0)
    , width(0.0)
    , fow(0.0)
    , angle_roll(0.0)
    , angle_pitch(0.0)
    , angle_yaw(0.0)  {
  (void)_alloc;
    }



   typedef double _height_type;
  _height_type height;

   typedef double _width_type;
  _width_type width;

   typedef double _fow_type;
  _fow_type fow;

   typedef double _angle_roll_type;
  _angle_roll_type angle_roll;

   typedef double _angle_pitch_type;
  _angle_pitch_type angle_pitch;

   typedef double _angle_yaw_type;
  _angle_yaw_type angle_yaw;





  typedef boost::shared_ptr< ::vitarana_drone::ImageFeatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vitarana_drone::ImageFeatures_<ContainerAllocator> const> ConstPtr;

}; // struct ImageFeatures_

typedef ::vitarana_drone::ImageFeatures_<std::allocator<void> > ImageFeatures;

typedef boost::shared_ptr< ::vitarana_drone::ImageFeatures > ImageFeaturesPtr;
typedef boost::shared_ptr< ::vitarana_drone::ImageFeatures const> ImageFeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vitarana_drone::ImageFeatures_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vitarana_drone::ImageFeatures_<ContainerAllocator1> & lhs, const ::vitarana_drone::ImageFeatures_<ContainerAllocator2> & rhs)
{
  return lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.fow == rhs.fow &&
    lhs.angle_roll == rhs.angle_roll &&
    lhs.angle_pitch == rhs.angle_pitch &&
    lhs.angle_yaw == rhs.angle_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vitarana_drone::ImageFeatures_<ContainerAllocator1> & lhs, const ::vitarana_drone::ImageFeatures_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vitarana_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::ImageFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::ImageFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::ImageFeatures_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a70c173d9bf19022bdce4bf7be3f64f1";
  }

  static const char* value(const ::vitarana_drone::ImageFeatures_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa70c173d9bf19022ULL;
  static const uint64_t static_value2 = 0xbdce4bf7be3f64f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vitarana_drone/ImageFeatures";
  }

  static const char* value(const ::vitarana_drone::ImageFeatures_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 height\n"
"float64 width\n"
"\n"
"float64 fow\n"
"\n"
"float64 angle_roll\n"
"float64 angle_pitch\n"
"float64 angle_yaw\n"
;
  }

  static const char* value(const ::vitarana_drone::ImageFeatures_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.fow);
      stream.next(m.angle_roll);
      stream.next(m.angle_pitch);
      stream.next(m.angle_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageFeatures_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vitarana_drone::ImageFeatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vitarana_drone::ImageFeatures_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "fow: ";
    Printer<double>::stream(s, indent + "  ", v.fow);
    s << indent << "angle_roll: ";
    Printer<double>::stream(s, indent + "  ", v.angle_roll);
    s << indent << "angle_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.angle_pitch);
    s << indent << "angle_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.angle_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VITARANA_DRONE_MESSAGE_IMAGEFEATURES_H
